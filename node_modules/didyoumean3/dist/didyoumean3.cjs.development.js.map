{"version":3,"file":"didyoumean3.cjs.development.js","sources":["../src/util.ts","../src/leven.ts","../src/index.ts"],"sourcesContent":["export interface Return {\n  (x: any): any;\n}\n\nexport interface Normalize {\n  (x: string): string;\n}\n\nexport interface Filter {\n  (score: number, target: string | object): boolean;\n}\n\n/**\n * @type {boolean} ignore: ignore case 'A' -> 'a'\n * @type {boolean} trim: ' a bcs ' -> 'a bcs'\n * @type {boolean} trimAll: ' a bcs' -> 'abcs'\n * @type {boolean} diacritics: 'café' -> 'café'.normalize()\n * @type {Function} normalize: you can formatter the string yourself\n * @type {Function} result: you can custom your return result\n * @type {Function} filter: you can filter the data into the returned results\n */\nexport type Options = {\n  ignore?: boolean;\n  trim?: boolean;\n  trimAll?: boolean;\n  diacritics?: boolean;\n  normalize?: Normalize;\n  result?: Return;\n  filter?: Filter;\n};\n\nexport const isFunction = (f: any) =>\n  !!(f && f.constructor && f.call && f.apply);\n\nexport const normalize = (\n  s: string = '',\n  { normalize, trim, ignore, trimAll, diacritics }: Partial<Options>\n): string => {\n  if (isFunction(normalize)) return normalize!(s);\n\n  trim && (s = s.trim());\n  trimAll && (s = s.replace(/\\s+/g, ''));\n  diacritics && (s = s.normalize());\n  ignore && (s = s.toLowerCase());\n\n  return s;\n};\n\nexport const resultFactory = (res?: Return) => (r: any) =>\n  isFunction(res) ? res!(r) : r;\n","const V: number[] = [];\nconst C: number[] = [];\n\n// talisman\nexport const leven = (a: string, b: string): number => {\n  if (a === b) return 0;\n\n  // switch\n  const temp = a;\n  if (a.length > b.length) {\n    a = b;\n    b = temp;\n  }\n\n  let la = a.length;\n  let lb = b.length;\n\n  if (!la) return lb;\n\n  // trim common suffix, that's the reson why we need swith the params according to it's length\n  while (la > 0 && a.charCodeAt(~-la) === b.charCodeAt(~-lb)) {\n    la--;\n    lb--;\n  }\n\n  if (!la) return lb;\n\n  let start = 0;\n  while (start < la && a.charCodeAt(start) === b.charCodeAt(start)) start++;\n\n  la -= start;\n  lb -= start;\n\n  if (!la) return lb;\n\n  let i = 0;\n\n  // metrics\n  // left, right, diagonally left, dl = if char equal, diagonally left + 0 else + 1\n  // Math.min(left + 1, right + 1, dl)\n  /**\n   *   *   *   a   b   c\n   *   |   |   |   |   |\n   *   * - 0 - 1 - 2 - 3\n   *   |   |   |   |   |\n   *   a - 1 - 0 - 1 - 2\n   *   |   |   |   |   |\n   *   b - 2 - 1 - 0 - 1\n   *   |   |   |   |   |\n   *   d - 3 - 2 - 1 - 1 <- result\n   */\n  while (i < lb) {\n    C[i] = b.charCodeAt(start + i);\n    V[i] = ++i;\n  }\n\n  let curr = 0,\n    above,\n    left,\n    charA,\n    j;\n\n  for (i = 0; i < la; i++) {\n    left = i;\n    curr = i + 1;\n    charA = a.charCodeAt(start + i);\n\n    for (j = 0; j < lb; j++) {\n      above = curr;\n\n      curr = left;\n      left = V[j];\n\n      if (charA !== C[j]) {\n        if (left < curr) curr = left;\n        if (above < curr) curr = above;\n        curr++;\n      }\n\n      V[j] = curr;\n    }\n  }\n\n  return curr;\n};\n","import { normalize, resultFactory, Options } from './util';\n\nimport { leven } from './leven';\n\nconst defaultOpts: Partial<Options> = {\n  ignore: false,\n  trim: true,\n  trimAll: false,\n  diacritics: false,\n  filter: () => true,\n};\n\nconst didyoumean3 = <T extends string>(\n  s: string,\n  t: ReadonlyArray<T>,\n  opts?: Options\n): any => {\n  const { result, filter, ...cfg } = {\n    ...defaultOpts,\n    ...opts,\n  };\n  s = normalize(s, cfg);\n  const res = resultFactory(result);\n\n  if (!s || !t || !t.length) return res(null);\n\n  const matched = [];\n  let winner: T | null = null;\n  let temp: number | null = null;\n\n  for (let i = 0, len = t.length; i < len; i++) {\n    const target = t[i];\n    const score = leven(s, normalize(target, cfg));\n\n    filter!(score, target) && matched.push({ score, target });\n\n    // May be the highest score or the lowest score\n    if (temp === null || score < temp) {\n      temp = score;\n      winner = target;\n    }\n  }\n\n  return res({ matched, winner });\n};\n\ndidyoumean3.leven = leven;\n\nexport { didyoumean3 };\n\nexport default didyoumean3;\n"],"names":["isFunction","f","constructor","call","apply","normalize","s","trim","ignore","trimAll","diacritics","replace","toLowerCase","resultFactory","res","r","V","C","leven","a","b","temp","length","la","lb","charCodeAt","start","i","curr","above","left","charA","j","defaultOpts","filter","didyoumean3","t","opts","result","cfg","matched","winner","len","target","score","push"],"mappings":"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"}