export interface Return {
    (x: any): any;
}
export interface Normalize {
    (x: string): string;
}
export interface Filter {
    (score: number, target: string | object): boolean;
}
/**
 * @type {boolean} ignore: ignore case 'A' -> 'a'
 * @type {boolean} trim: ' a bcs ' -> 'a bcs'
 * @type {boolean} trimAll: ' a bcs' -> 'abcs'
 * @type {boolean} diacritics: 'café' -> 'café'.normalize()
 * @type {Function} normalize: you can formatter the string yourself
 * @type {Function} result: you can custom your return result
 * @type {Function} filter: you can filter the data into the returned results
 */
export declare type Options = {
    ignore?: boolean;
    trim?: boolean;
    trimAll?: boolean;
    diacritics?: boolean;
    normalize?: Normalize;
    result?: Return;
    filter?: Filter;
};
export declare const isFunction: (f: any) => boolean;
export declare const normalize: (s: string | undefined, { normalize, trim, ignore, trimAll, diacritics }: Partial<Options>) => string;
export declare const resultFactory: (res?: Return | undefined) => (r: any) => any;
